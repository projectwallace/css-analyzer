import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { analyze } from '../index.js'

const FontFamilies = suite('FontFamilies')

FontFamilies('recognizes a font-family', () => {
  const fixture = `
    test {
      font-family: "Droid Sans", serif;
      font-family: sans-serif;
      font-family: "Arial Black", 'Arial Bold', Gadget, sans-serif;
      font-family: Brush Script MT, cursive;
      font-family: monospace;
      font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

      /* Unrelated */
      color: brown;
      font-size: 12px;
    }
  `
  const actual = analyze(fixture).values.fontFamilies
  assert.equal(actual.total, 7)
  assert.equal(actual.total_unique, 7)
  assert.equal(Array.from(actual.list()), [
    { name: '"Droid Sans", serif', count: 1 },
    { name: 'sans-serif', count: 1 },
    { name: `"Arial Black", 'Arial Bold', Gadget, sans-serif`, count: 1 },
    { name: 'Brush Script MT, cursive', count: 1 },
    { name: 'monospace', count: 1 },
    { name: 'Consolas, "Liberation Mono", Menlo, Courier, monospace', count: 1 },
    { name: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"', count: 1 },
  ])
})

FontFamilies('extracts the `font` shorthand', () => {
  const fixture = `
    test {
      font: large 'Noto Sans';
      font: normal normal 1em/1 "Source Sans Pro", serif;
      font: normal normal 1.2em serif;
      font: 400 1.3em/1 serif;
      font: 1em / 1 serif;
      font: 1em/ 1 serif;
      font: 1em /1 serif;
      font: normal normal 11px/1.5 -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
      font: 0/0 a; /* As generated by some css minifiers */
      font: 1.2em/1.2em; /* Found in indiatimes.com */
      font: 12px var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace); /* From github.com */

      /* Unrelated */
      color: brown;
      font-size: 123456789px;
    }
  `
  const actual = analyze(fixture).values.fontFamilies
  assert.equal(actual.total, 12)
  assert.equal(actual.total_unique, 8)
  assert.equal(Array.from(actual.list()), [
    { name: `'Noto Sans'`, count: 1 },
    { name: `"Source Sans Pro", serif`, count: 1 },
    { name: 'serif', count: 5 },
    { name: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"', count: 1 },
    { name: 'Consolas, "Liberation Mono", Menlo, Courier, monospace', count: 1 },
    { name: 'a', count: 1 },
    { name: 'var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace)', count: 1 },
    // This entry exists due to a ??bug?? in CSSTree, but it's better than not counting the value above this as well
    { name: 'ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace', count: 1 },
  ])
})

FontFamilies('does not crash on `12px var(...)', () => {
  const fixture = `
    test {
      font: 12px var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace);
    }
  `
  assert.not.throws(() => {
    analyze(fixture).values.fontFamilies
  })
})

FontFamilies('handles system fonts', () => {
  // Source: https://drafts.csswg.org/css-fonts-3/#font-prop
  const fixture = `
    test {
      font: menu;        /* use the font settings for system menus */
      font: large menu;  /* use a font family named "menu" */
    }
  `
  const actual = analyze(fixture).values.fontFamilies
  assert.equal(actual.total, 1)
  assert.equal(actual.total_unique, 1)
  assert.equal(Array.from(actual.list()), [
    { name: 'menu', count: 1 },
  ])
})

FontFamilies('ignores keywords and global values', () => {
  const fixture = `
    test {
      /* Global values */
      font-family: inherit;
      font-family: initial;
      font-family: revert;
      font-family: revert-layer;
      font-family: unset;

      font: inherit;
      font: initial;
      font: revert;
      font: revert-layer;
      font: unset;
    }
  `
  const actual = analyze(fixture).values.fontFamilies
  assert.equal(actual.total, 0)
  assert.equal(actual.total_unique, 0)
})

FontFamilies.run()