import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { analyze } from '../index.js'

const FontSizes = suite('FontSizes')

FontSizes('recognizes a font-size', () => {
  const fixture = `
    test {
      font-size: 10px;
      font-size: small;
      font-size: 1em;
      font-size: calc(3vw + 1em);

      /* Unrelated */
      color: brown;
      font-family: serif;
    }
  `
  const actual = analyze(fixture).values.fontSizes
  const expected = {
    total: 4,
    totalUnique: 4,
    unique: {
      '10px': 1,
      'small': 1,
      '1em': 1,
      'calc(3vw + 1em)': 1,
    },
    uniquenessRatio: 4 / 4
  }

  assert.equal(actual, expected)
})

FontSizes('extracts the `font` shorthand', () => {
  const fixture = `
    test {
      font: large "Noto Sans";
      font: normal normal 1em/1 "Source Sans Pro", serif;
      font: normal normal 1.2em serif;
      font: 400 1.3em/1 serif;
      font: 1em / 1 serif;
      font: 1em/ 1 serif;
      font: 1em /1 serif;
      font: 2em/1.4em serif;
      font: normal normal 11px/1.5 -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
      font: 0/0 a; /* As generated by some css minifiers */

      /* Unrelated */
      color: brown;
      font-family: serif;
    }
  `
  const actual = analyze(fixture).values.fontSizes
  const expected = {
    total: 11,
    totalUnique: 7,
    unique: {
      '0': 1,
      'large': 1,
      '1em': 4,
      '1.2em': 1,
      '1.3em': 1,
      '2em': 1,
      '11px': 2,
    },
    uniquenessRatio: 7 / 11
  }
  assert.equal(actual, expected)
})

FontSizes('handles system fonts', () => {
  // Source: https://drafts.csswg.org/css-fonts-3/#font-prop
  const fixture = `
    test {
      font: menu;        /* use the font settings for system menus */
      font: large menu;  /* use a font family named "menu" */
    }
  `
  const actual = analyze(fixture).values.fontSizes
  const expected = {
    total: 1,
    totalUnique: 1,
    unique: {
      'large': 1,
    },
    uniquenessRatio: 1
  }

  assert.equal(actual, expected)
})

FontSizes('ignores keywords and global values', () => {
  const fixture = `
    test {
      font: inherit;
      font: initial;
      font: unset;
      font: revert;

      /*TODO:font-size: inherit;
      font-size: initial;
      font-size: unset;
      font-size: revert;*/
    }
  `
  const actual = analyze(fixture).values.fontSizes
  const expected = {
    total: 0,
    totalUnique: 0,
    unique: {},
    uniquenessRatio: 0
  }

  assert.equal(actual, expected)
})

FontSizes.run()