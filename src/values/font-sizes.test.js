import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { analyze } from '../index.js'

const FontSizes = suite('FontSizes')

FontSizes('recognizes a font-size', () => {
  const fixture = `
    test {
      font-size: 10px;
      font-size: small;
      font-size: 1em;
      font-size: calc(3vw + 1em);

      /* Unrelated */
      color: brown;
      font-family: serif;
    }
  `
  const actual = analyze(fixture).values.fontSizes
  assert.equal(actual.total, 4)
  assert.equal(actual.total_unique, 4)
  assert.equal(Array.from(actual.list()), [
    { name: '10px', count: 1 },
    { name: 'small', count: 1 },
    { name: '1em', count: 1 },
    { name: 'calc(3vw + 1em)', count: 1 },
  ])
})

FontSizes('extracts the `font` shorthand', () => {
  const fixture = `
    test {
      font: large "Noto Sans";
      font: normal normal 1em/1 "Source Sans Pro", serif;
      font: normal normal 1.2em serif;
      font: 400 1.3em/1 serif;
      font: 1em / 1 serif;
      font: 1em/ 1 serif;
      font: 1em /1 serif;
      font: 2em/1.4em serif;
      font: normal normal 11px/1.5 -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
      font: 0/0 a; /* As generated by some css minifiers */
      font: 10PX sans-serif;
      font: 12px var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace); /* from github.com */

      /* Unrelated */
      color: brown;
      font-family: serif;
    }
  `
  const actual = analyze(fixture).values.fontSizes
  assert.equal(actual.total, 13)
  assert.equal(actual.total_unique, 9)
  assert.equal(Array.from(actual.list()), [
    { name: 'large', count: 1 },
    { name: '1em', count: 4 },
    { name: '1.2em', count: 1 },
    { name: '1.3em', count: 1 },
    { name: '2em', count: 1 },
    { name: '11px', count: 2 },
    { name: '0', count: 1 },
    { name: '10PX', count: 1 },
    { name: '12px', count: 1 },
  ])
})

FontSizes('handles system fonts', () => {
  // Source: https://drafts.csswg.org/css-fonts-3/#font-prop
  const fixture = `
    test {
      font: menu;        /* use the font settings for system menus */
      font: large menu;  /* use a font family named "menu" */
    }
  `
  const actual = analyze(fixture).values.fontSizes
  assert.equal(actual.total, 1)
  assert.equal(actual.total_unique, 1)
  assert.equal(Array.from(actual.list()), [
    { name: 'large', count: 1 },
  ])
})

FontSizes('ignores keywords and global values', () => {
  const fixture = `
    test {
      /* Global values */
      font-size: inherit;
      font-size: initial;
      font-size: revert;
      font-size: revert-layer;
      font-size: unset;

      font: inherit;
      font: initial;
      font: revert;
      font: revert-layer;
      font: unset;
    }
  `
  const actual = analyze(fixture).values.fontSizes
  assert.equal(actual.total, 0)
})

FontSizes.run()